package test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.junit.Test;

import com.ecvan.batch.Configure;
import com.ecvan.common.sql.Record;
import com.ecvan.common.sql.SQLUtil;
import com.ecvan.common.sql.conn.DbConnection;
import com.ecvan.common.sql.conn.DbConnectionManager;



public class LocalBatchChange {

	@Test
	public void LocalBatchChange() throws Exception {
		
		DbConnection conn = null;
		List<Record> record_column = new ArrayList<Record>();
		List<Record> record_table = new ArrayList<Record>();
		String tableParams ="''";
		
		try {
			FileInputStream fis = new FileInputStream("src//resources//db.properties");
			Properties properties = new Properties();
			properties.load(fis);
			
			SQLUtil.init(Configure.CONFIG_BATCH_DB_PROPERTIES_ID, properties);
			conn = DbConnectionManager.getInstance(Configure.CONFIG_BATCH_DB_PROPERTIES_ID);
			
			record_column = SQLUtil.selectQueryNotEncoding(conn.getConnection(), "SELECT DISTINCT(COLUMN_ASIS), COLUMN_TOBE FROM  WHERE TABLE_ASIS IN ("+tableParams+")");
			record_table = SQLUtil.selectQueryNotEncoding(conn.getConnection(), "SELECT DISTINCT(TABLE_ASIS), TABLE_TOBE FROM  WHERE TABLE_ASIS IN ("+tableParams+")");
			
		} catch (Exception e) {
			throw e;
		} finally {
			SQLUtil.closeConnection(conn);
		}

		String batchClass = "trigger.nusinf.samsung.properties";
		//String str = Files.readString(Paths.get("src//"+batchClass+".java"));
		//String str = Files.readString(Paths.get("C:\\V\\"+batchClass+".xsl"));
		String str = "";
		try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("D:\\\\"+batchClass),"UTF-8"))) {
		    String line;
		    while ((line = br.readLine()) != null) {
		        str=str+line;
		        str=str+"\n";
		    }
		} catch (IOException e) {
		    e.printStackTrace();
		}
		
		
		File newFile = new File("D:\\NEW\\"+batchClass);
		
		String asis = "";
		String tobe = "";
		String asis1 = "";
		String tobe1 = "";
		
		for(int i=0;i<record_column.size();i++) {
			asis = record_column.get(i).get("COLUMN_ASIS").toString();
			tobe = record_column.get(i).get("COLUMN_TOBE").toString();

			str=str.replaceAll(asis, tobe);

			//템플릿
			/*asis1="</"+asis;
			tobe1="</"+tobe;
			str=str.replaceAll(asis1, tobe1);
			asis1="<"+asis;
			tobe1="<"+tobe;
			str=str.replaceAll(asis1, tobe1);*/

			//xsl
			/*asis1="/"+asis+"\\)";
			tobe1="/"+tobe+"\\)";
			str=str.replaceAll(asis1, tobe1);
			asis1="/"+asis+"\"";
			tobe1="/"+tobe+"\"";
			str=str.replaceAll(asis1, tobe1);
			asis1="\""+asis;
			tobe1="\""+tobe;
			str=str.replaceAll(asis1, tobe1);
			asis1="\\("+asis;
			tobe1="\\("+tobe;
			str=str.replaceAll(asis1, tobe1);*/
		}
		
		for(int i=0;i<record_table.size();i++) {
			asis = record_table.get(i).get("TABLE_ASIS").toString();
			tobe = record_table.get(i).get("TABLE_TOBE").toString();
			str=str.replaceAll(asis, tobe);
		}
		
		
		System.out.println(str);
		try {
		    BufferedWriter writer = new BufferedWriter(new FileWriter(newFile));
		    writer.write(str);
		    writer.close();
		} catch (IOException e) {
		    e.printStackTrace();
		}
	}
}
